import * as tslib_1 from "tslib";
/* tslint:disable */
import * as React from 'react';
/* tslint:enable */
import { getRTL, getInitials, styled } from '../../../Utilities';
import { BasePicker, BasePickerListBelow } from '../BasePicker';
import { ValidationState } from '../BasePicker.types';
import { SelectedItemDefault } from './PeoplePickerItems/SelectedItemDefault';
import { SuggestionItemSmall, SuggestionItemNormal } from './PeoplePickerItems/SuggestionItemDefault';
import './PeoplePicker.scss';
import { getStyles } from '../BasePicker.styles';
var BasePeoplePicker = /** @class */ (function (_super) {
    tslib_1.__extends(BasePeoplePicker, _super);
    function BasePeoplePicker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BasePeoplePicker;
}(BasePicker));
export { BasePeoplePicker };
var MemberListPeoplePicker = /** @class */ (function (_super) {
    tslib_1.__extends(MemberListPeoplePicker, _super);
    function MemberListPeoplePicker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MemberListPeoplePicker;
}(BasePickerListBelow));
export { MemberListPeoplePicker };
/**
 * Standard People Picker.
 */
var NormalPeoplePickerBase = /** @class */ (function (_super) {
    tslib_1.__extends(NormalPeoplePickerBase, _super);
    function NormalPeoplePickerBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NormalPeoplePickerBase.defaultProps = {
        onRenderItem: function (props) { return React.createElement(SelectedItemDefault, tslib_1.__assign({}, props)); },
        onRenderSuggestionsItem: function (props, itemProps) {
            return SuggestionItemNormal(tslib_1.__assign({}, props), tslib_1.__assign({}, itemProps));
        },
        createGenericItem: createGenericItem
    };
    return NormalPeoplePickerBase;
}(BasePeoplePicker));
export { NormalPeoplePickerBase };
/**
 * Compact layout. It uses small personas when displaying search results.
 */
var CompactPeoplePickerBase = /** @class */ (function (_super) {
    tslib_1.__extends(CompactPeoplePickerBase, _super);
    function CompactPeoplePickerBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CompactPeoplePickerBase.defaultProps = {
        onRenderItem: function (props) { return React.createElement(SelectedItemDefault, tslib_1.__assign({}, props)); },
        onRenderSuggestionsItem: function (props, itemProps) {
            return SuggestionItemSmall(tslib_1.__assign({}, props), tslib_1.__assign({}, itemProps));
        },
        createGenericItem: createGenericItem
    };
    return CompactPeoplePickerBase;
}(BasePeoplePicker));
export { CompactPeoplePickerBase };
/**
 * MemberList layout. The selected people show up below the search box.
 */
var ListPeoplePickerBase = /** @class */ (function (_super) {
    tslib_1.__extends(ListPeoplePickerBase, _super);
    function ListPeoplePickerBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListPeoplePickerBase.defaultProps = {
        onRenderItem: function (props) { return React.createElement(SelectedItemDefault, tslib_1.__assign({}, props)); },
        onRenderSuggestionsItem: function (props, itemProps) {
            return SuggestionItemNormal(tslib_1.__assign({}, props), tslib_1.__assign({}, itemProps));
        },
        createGenericItem: createGenericItem
    };
    return ListPeoplePickerBase;
}(MemberListPeoplePicker));
export { ListPeoplePickerBase };
export function createGenericItem(name, currentValidationState) {
    var personaToConvert = {
        key: name,
        primaryText: name,
        imageInitials: '!',
        ValidationState: currentValidationState
    };
    if (currentValidationState !== ValidationState.warning) {
        personaToConvert.imageInitials = getInitials(name, getRTL());
    }
    return personaToConvert;
}
export var NormalPeoplePicker = styled(NormalPeoplePickerBase, getStyles, undefined, {
    scope: 'NormalPeoplePicker'
});
export var CompactPeoplePicker = styled(CompactPeoplePickerBase, getStyles, undefined, {
    scope: 'CompactPeoplePicker'
});
export var ListPeoplePicker = styled(ListPeoplePickerBase, getStyles, undefined, {
    scope: 'ListPeoplePickerBase'
});
//# sourceMappingURL=PeoplePicker.js.map