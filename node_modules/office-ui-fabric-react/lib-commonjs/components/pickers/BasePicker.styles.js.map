{"version":3,"file":"BasePicker.styles.js","sourceRoot":"../src/","sources":["components/pickers/BasePicker.styles.ts"],"names":[],"mappings":";;AAAA,yCAAwE;AAGxE,IAAM,gBAAgB,GAAG;IACvB,IAAI,EAAE,eAAe;IACrB,IAAI,EAAE,oBAAoB;IAC1B,YAAY,EAAE,4BAA4B;IAC1C,KAAK,EAAE,qBAAqB;CAC7B,CAAC;AAEF,mBAA0B,KAA4B;IAC5C,IAAA,2BAAS,EAAE,mBAAK,EAAE,2BAAS,EAAE,qCAAc,CAAW;IAE9D,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;KACtF;IACO,IAAA,qCAAc,CAAW;IACzB,IAAA,wCAAW,EAAE,sDAAkB,EAAE,wDAAmB,CAAoB;IAEhF,IAAM,UAAU,GAAG,6BAAmB,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAEhE,OAAO;QACL,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC;QAClC,IAAI,EAAE;YACJ,UAAU,CAAC,IAAI;YACf;gBACE,OAAO,EAAE,MAAM;gBACf,QAAQ,EAAE,MAAM;gBAChB,UAAU,EAAE,QAAQ;gBACpB,SAAS,EAAE,YAAY;gBACvB,QAAQ,EAAE,GAAG;gBACb,SAAS,EAAE,EAAE;gBACb,MAAM,EAAE,eAAa,WAAa;aACnC;YACD,CAAC,SAAS,IAAI;gBACZ,SAAS,EAAE;oBACT,QAAQ,EAAE;wBACR,WAAW,EAAE,kBAAkB;qBAChC;iBACF;aACF;YACD,SAAS,IAAI;gBACX,WAAW,EAAE,mBAAmB;aACjC;SACF;QACD,YAAY,EAAE;YACZ,UAAU,CAAC,YAAY;YACvB;gBACE,OAAO,EAAE,MAAM;gBACf,QAAQ,EAAE,MAAM;aACjB;SACF;QACD,KAAK,EAAE;YACL,UAAU,CAAC,KAAK;YAChB;gBACE,MAAM,EAAE,EAAE;gBACV,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,CAAC;gBACX,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,SAAS;gBAClB,SAAS,EAAE,UAAU;aACtB;YACD,cAAc;SACf;QACD,gBAAgB,EAAE,4BAAkB;KACrC,CAAC;AACJ,CAAC;AAxDD,8BAwDC","sourcesContent":["import { getGlobalClassNames, hiddenContentStyle } from '../../Styling';\r\nimport { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\r\n\r\nconst GlobalClassNames = {\r\n  root: 'ms-BasePicker',\r\n  text: 'ms-BasePicker-text',\r\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\r\n  input: 'ms-BasePicker-input'\r\n};\r\n\r\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\r\n  const { className, theme, isFocused, inputClassName } = props;\r\n\r\n  if (!theme) {\r\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\r\n  }\r\n  const { semanticColors } = theme;\r\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\r\n\r\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\r\n\r\n  return {\r\n    root: [classNames.root, className],\r\n    text: [\r\n      classNames.text,\r\n      {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        boxSizing: 'border-box',\r\n        minWidth: 180,\r\n        minHeight: 30,\r\n        border: `1px solid ${inputBorder}`\r\n      },\r\n      !isFocused && {\r\n        selectors: {\r\n          ':hover': {\r\n            borderColor: inputBorderHovered\r\n          }\r\n        }\r\n      },\r\n      isFocused && {\r\n        borderColor: inputFocusBorderAlt\r\n      }\r\n    ],\r\n    itemsWrapper: [\r\n      classNames.itemsWrapper,\r\n      {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n      }\r\n    ],\r\n    input: [\r\n      classNames.input,\r\n      {\r\n        height: 34,\r\n        border: 'none',\r\n        flexGrow: 1,\r\n        outline: 'none',\r\n        padding: '0 6px 0',\r\n        alignSelf: 'flex-end'\r\n      },\r\n      inputClassName\r\n    ],\r\n    screenReaderText: hiddenContentStyle\r\n  };\r\n}\r\n"]}